"""Dictionary related utility functions."""
from csv import DictReader
__author__ = "730614342"


def read_csv_rows(path: str) -> list[dict[str, str]]:
    """Read csv rows from given paths, store csv data to 'table'."""
    result: list[dict[str, str]] = []

    file_handle = open(path, 'r', encoding='utf8')

    csv_reader = DictReader(file_handle)

    for row in csv_reader:
        result.append(row)

    file_handle.close()

    return result


def column_values(table: list[dict[str, str]], column: str) -> list[str]:
    """Produce a `list[str]` of all values in a single `column` whose name is the second paramete."""
    result: list[str] = []

    for row in table:
        item: str = row[column] 
        result.append(item)

    return result


def columnar(table: list[dict[str, str]]) -> dict[str, list[str]]:
    """Transform a table represented as a list of rows into one represented as a dictionary of columns."""
    result: dict[str, list[str]] = {}
    
    first_row: dict[str, str] = table[0]
    for col in first_row:
        result[col] = column_values(table, col)
    
    return result


def head(table: dict[str, list[str]], rows: int) -> dict[str, list[str]]:
    """Produce first N rows of data of each cols."""
    result: dict[str, list[str]] = {}

    for row in table.keys():
        firstN: list[str] = [] 
        length: int = min(rows, len(table[row]))
        for i in range(length):
            firstN.append(table[row][i])
        result[row] = firstN
    
    return result


def select(table: dict[str, list[str]], names: list[str]) -> dict[str, list[str]]:
    """Produce a new column based table with only a specific subset of the original cols."""
    result: dict[str, list[str]] = {}
    for name in names:
        result[name] = table[name]
    
    return result


def concat(table1: dict[str, list[str]], table2: dict[str, list[str]]) -> dict[str, list[str]]:
    """Combine 2 column-based table and return new table."""
    result: dict[str, list[str]] = {}
    for row in table1.keys():
        result[row] = table1[row]
    for row in table2.keys():
        if row in result.keys():
            result[row].extend(table2[row])
        else:
            result[row] = table2[row]
    
    return result


def count(data: list[str]) -> dict[str, int]:
    """Count the frequency of a list[str]."""
    result: dict[str, int] = {}

    for item in data:
        if item in result.keys():
            result[item] += 1
        else:
            result[item] = 1

    return result